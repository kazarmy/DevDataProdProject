library(swirl)
swirl()
head(pValues)
sum(pValues < .05)
sum(p.adjust(pValues, method="bonferroni") < .05)
sum(p.adjust(pValues, method="BH") < .05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
24/500
table(p.adjust(pValues2, method="bonferroni")<.05, trueStatus)
table(p.adjust(pValues2, method="BH")<.05, trueStatus)
1*1/6 + 2*1/6 + 3*1/6 + 4*1/6 + 5*1/6 + 6*1/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace=TRUE)
?matrix
resam <- matric(sam, B, nh)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampleMedians, c(.025, .975))
quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
data(anscombe);example(anscombe)
library(swirl)
rm(list=ls())
swirl(0)
install_from_swirl("Regression Models")
swirl()
library(swirl)
swirl()
all <- lm(Fertility ~ ., data = swiss)
summay(all)
summary(all)
summary(lm(Fertility ~ Agriculture))
summary(lm(Fertility ~ Agriculture), swiss)
summary(lm(Fertility ~ Agriculture), data=swiss)
summary(lm(Fertility ~ Agriculture, data = swiss))
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec = swiss$Examination + swiss$Catholic
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, data=swiss)
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <- lm(count ~ spray, data=InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, data=InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, data=spray2)
View(spray2)
fit2 <- lm(count ~ spray2, data=InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/1.6011
setwd("~/DSS/Regression Models/Week 3")
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female"])
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female",])
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
View(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
sigma <- sqrt(deviance(resid(fit)) - fit$df.residual)
sigma <- sqrt(deviance(resid(fit)) - fit$df.residual)
sigma <- sqrt(deviance(resid(fit)) - fit$df.residual
)
sigma <- sqrt(deviance(resid(fit)) - df.residual(FIT))
sigma <- sqrt(deviance(resid(fit)) - df.residual(fit))
sigma <- sqrt(deviance(resid(fit))
)
sigma <- sqrt(deviance(fit$residuals) / fit$df.residual)
1
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit) / (sigma*sqrt(1-hatvalues(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno) / df.residual(fitno))
resid(fit)[1] / (sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2) / 2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
data("iris")
head(iris)
iris$Setosa <- as.integer(iris$Species == "setosa")
head(iris)
View(iris)
logRegSetosa <- glm(iris$Setosa ~ iris$Petal.Length, family="binomial")
summary(logRegSetosa)
plot(logRegSetosa)
anova(logRegSetosa,test="Chisq")
plot(iris$Petal.Length,logRegSetosa$fitted)
?anova
logRegSetosa2 <- glm(iris$Setosa ~ iris$Petal.Length + iris$Petal.Width + iris$Sepal.Length + iris$Sepal.Width, family="binomial")
anova(logRegSetosa2,test="Chisq")
iris$Versicolor <- as.integer(iris$Species == "versicolor")
logRegVersicolor <- glm(iris$Versicolor ~ iris$Petal.Length, family="binomial")
summary(logRegVersicolor)
plot(iris$Petal.Length,logRegVersicolor$fitted)
library(ggplot2)
qplot(Petal.Length, color=Species, data=iris)
logRegVersicolor2 <- glm(iris$Versicolor ~ iris$Petal.Length + iris$Petal.Width + iris$Sepal.Length + iris$Sepal.Width, family="binomial")
anova(logRegVersicolor2)
anova(logRegVersicolor2, test="ChiSq")
anova(logRegVersicolor2, test="Chisq")
qplot(Sepal.Width, color=Species, data=iris)
logRegVersicolor3 <- glm(iris[iris$Species != "setosa",]$Versicolor ~ iris[iris$Species != "setosa",]$Petal.Length, family="binomial")
iris[iris$Species != "setosa",]
plot(iris$Petal.Length,logRegVersicolor3$fitted)
plot(iris[iris$Species != "setosa",]$Petal.Length,logRegVersicolor3$fitted)
plot(logRegVersicolor3)
plot(logRegVersicolor2)
install.packages("psych")
library(psych)
describe(sat.act)
?sat.act
?iq.items
??iq.items
?psych
str(sat.act)
str(as.factor(sat.act$education)
)
str(as.factor(sat.act$gender))
?sat.act
install.packkages("shiny")
install.packages("shiny")
library(shiny)
rm(lis=ls())
rm(list=ls())
library(UsingR)
install.packages("UsingR")
runApp()
?runApp()
getwd()
setwd("~/DSS/Developing Data Products/Week 4/demo")
runApp()
?data
data()
library("shiny")
runApp()
library(psych)
??"psych"
setwd("..")
getwd()
runApp()
runApp()
names(sat.act)
names(sat.act)[[2]]
names(sat.act)[2]
runApp()
runApp()
sat.act[["gender"]]
sat.act["gender"]
class(sat.act["gender"])
class(sat.act[["gender"]])
class(sat.act[,"gender"])
sat.act[,"gender"]
class(names(sat.act))
runApp()
?plot
runApp()
runApp()
runApp()
str(sat.act)
str(sat.act)
runApp()
sat.act$gender <- as.factor(sat.act$gender)
sat.act$education <- as.factor(sat.act$gender)
plot(sat.act$gender, sat.act$education)
runApp()
runApp()
?plot
runApp()
runApp()
rm(list=ls())
runApp()
?jitter
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot
?axes
runApp()
runApp()
?abline
runApp()
runApp()
runApp()
?checkboxInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_jitter
?renderPlot
runApp()
?plot
?sat.act
?plot
?jitter
runApp()
?plot.default
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sat.act
?axis
runApp()
runApp()
runApp()
?lm
?pairs.panels
??pairs.panels
??corr
?cor
runApp()
library(shiny)
runApp()
?summary.lm
library(psych)
sat.act[,"SATQ"]
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coef
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients
summary.lm
s3methods
print
methods("print")
?methods
print.summary.lm
print.lm
?getS3method
getS3method("print", "summary.lm")
?"printCoefmat"
printCooefmat(summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coef)
printCoefmat(summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coef)
printCoefmat
?format.pval
?summary.lm
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[2][1]
?plot
runApp()
?cat
runApp()
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[2][4]
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[2][3]
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[1]
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[2]
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[3]
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[4]
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[5]
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[2,4]
summary(lm(sat.act[,"SATQ"] ~ sat.act[,"SATV"]))$coefficients[2,1]
runApp()
?format.pval
runApp()
runApp()
?round
runApp()
?synnum
?symnum
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
eduHelpText <- c("For education, the numbers have the following meaning:",
"0: Less than 12 years",
"1: High school graduate",
"2: Currently in college/university",
"3: Some college/university, but did not graduate",
"4: College/university degree",
"5: Currently in graduate or professional school",
"6: Graduate or professional school degree")
paste(eduHelpText, sep = "<br/>")
?paste
?paste0
runApp()
runApp()
?symnum
runApp()
runApp()
str(sat.act)
str(as.factor(sat.act$education)()
)
str(as.factor(sat.act$education))
?sat.act
describe(sat.act)
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(psych)
names(sat.act)
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("sat.act_slr_explorer")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
rm(list=ls())
slidify("index.Rmd")
browseURL("index.html")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
